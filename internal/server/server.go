package server

import (
	"net/http"
	"os"

	"github.com/gorilla/mux"

	"github.com/rautaruukkipalich/go_notes/internal/store"
	"github.com/sirupsen/logrus"

	_ "github.com/rautaruukkipalich/go_notes/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/swaggo/http-swagger/v2"
)

type Server struct {
	store  store.Store
	cache store.Cache
	router *mux.Router
	logger *logrus.Logger
}

func NewServer(
	store store.Store,
	cache store.Cache,
) *Server {
	s := &Server{
		store: store,
		cache: cache,
	}
	s.configureRouter()
	s.configureLogger("debug")
	return s
}

func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	s.router.ServeHTTP(w, r)
}

func (s *Server) configureLogger(lvl string) {
	
	level, err := logrus.ParseLevel(lvl)
	if err != nil {
		panic(err)
	}

	s.logger = &logrus.Logger{
		Out: os.Stdout,
		Level: level,
		Formatter: &logrus.JSONFormatter{
			FieldMap: logrus.FieldMap{
			   logrus.FieldKeyTime:  "timestamp",
			   logrus.FieldKeyLevel: "level",
			   logrus.FieldKeyMsg:   "message",
			   logrus.FieldKeyFunc:  "caller",
			},
		},
	}
}

func (s *Server) configureRouter() {

	s.router = mux.NewRouter()

	s.router.PathPrefix("/swagger/").HandlerFunc(httpSwagger.WrapHandler)

	s.router.Handle("/notes", s.GetNotes()).Methods(http.MethodGet)
	s.router.Handle("/notes", s.PostNote()).Methods(http.MethodPost)
	s.router.Handle("/notes/{id}", s.GetNote()).Methods(http.MethodGet)
	s.router.Handle("/notes/{id}", s.PatchNote()).Methods(http.MethodPatch)
	s.router.Handle("/notes/{id}", s.DeleteNote()).Methods(http.MethodDelete)

	s.router.Use(s.AuthMiddleware)
}

func (s *Server) heatCache() error {
	// TODO: heatcache
	s.logger.Info("heat cache")

	notes, err := s.store.Note().HeatCache()
	if err != nil {
		s.logger.Errorf("get notes from db. heat cache: %v", err)
		return err
	}

	err = s.cache.Note().SetNotes(notes)
	if err != nil {
		s.logger.Errorf("set notes to cache. heat cache: %v", err)
		return err
	}
	s.logger.Info("cache heat over")
	return nil
}